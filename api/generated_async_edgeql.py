# AUTOGENERATED FROM:
#     'api/queries/create_user.edgeql'
#     'api/queries/delete_user.edgeql'
#     'api/queries/get_user_by_username.edgeql'
#     'api/queries/get_users.edgeql'
#     'api/queries/update_user.edgeql'
# WITH:
#     $ edgedb-py --file -I elizabeth_db


from __future__ import annotations
import dataclasses
import edgedb
import typing
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID
    username: str
    first_name: str
    last_name: str


@dataclasses.dataclass
class DeleteUserResult(NoPydanticValidation):
    id: uuid.UUID
    username: str


@dataclasses.dataclass
class GetUserByUsernameResult(NoPydanticValidation):
    id: uuid.UUID
    first_name: str
    last_name: str
    username: str


@dataclasses.dataclass
class UpdateUserResult(NoPydanticValidation):
    id: uuid.UUID
    first_name: str
    last_name: str


async def create_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    first_name: str,
    last_name: str,
    username: str,
    password: str,
    role_id: uuid.UUID,
) -> CreateUserResult:
    return await executor.query_single(
        """\
        select (insert auth::User {
            first_name := <str>$first_name,
            last_name := <str>$last_name,
            username := <str>$username,
            password := <str>$password,
            role := assert_single((select auth::Role filter .id = <uuid>$role_id))
        }) {
            username,
            first_name,
            last_name
        };\
        """,
        first_name=first_name,
        last_name=last_name,
        username=username,
        password=password,
        role_id=role_id,
    )


async def delete_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
) -> typing.Optional[DeleteUserResult]:
    return await executor.query_single(
        """\
        select (
            delete auth::User filter .username = <str>$username
        ) {username};\
        """,
        username=username,
    )


async def get_user_by_username(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
) -> typing.Optional[GetUserByUsernameResult]:
    return await executor.query_single(
        """\
        select auth::User {first_name, last_name, username}
        filter .username = <str>$username\
        """,
        username=username,
    )


async def get_users(
    executor: edgedb.AsyncIOExecutor,
) -> list[GetUserByUsernameResult]:
    return await executor.query(
        """\
        select auth::User {first_name, last_name, username};\
        """,
    )


async def update_user(
    executor: edgedb.AsyncIOExecutor,
    *,
    username: str,
    first_name: str,
    last_name: str,
    role_id: uuid.UUID,
) -> typing.Optional[UpdateUserResult]:
    return await executor.query_single(
        """\
        select (
            update auth::User filter .username = <str>$username
                set {
                    first_name := <str>$first_name,
                    last_name := <str>$last_name,
                    role := assert_single((select auth::Role filter .id = <uuid>$role_id))
                }
        ) {
            first_name,
            last_name
        };\
        """,
        username=username,
        first_name=first_name,
        last_name=last_name,
        role_id=role_id,
    )
